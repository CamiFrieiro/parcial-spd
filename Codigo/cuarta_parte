#define segB 11
#define segA 10
#define segF 9
#define segG 8
#define segE 7
#define segD 6
#define segC 5
#define INTERRUPTOR_DESLIZANTE 2 // interruptor deslizante
#define UNIDAD A4 // Display de unidades
#define DECENA A5 // Display de decenas
#define motor 13  // Motor
#define sensor A0 // Sensor de temperatura
#define APAGADOS 0
#define tiempoDisplayON 400
#define intervaloDisplay 200 // Cambia este valor para ajustar la velocidad del display (en milisegundos)
#define sensorAmbiental A1 


int contador = 0; // Contador
int interruptor = 0; // inicializacion del interrumptor deslizante
int temperatura = 0; //inicializacion de temperatura
bool interruptorEncendido = false; // para saber si esta el interrumptor esta en on o off (true o false)
unsigned long ultimoTiempoDisplay = 0; // ultima actualizaciÃ³n del display
int numeroMultiplo = 0; // numero primo a mostrar
int limiteLuz = 0;
int valorLuz = 0;

void setup() {
  pinMode(INTERRUPTOR_DESLIZANTE, INPUT_PULLUP);
  pinMode(segA, OUTPUT);
  pinMode(segB, OUTPUT);
  pinMode(segC, OUTPUT);
  pinMode(segD, OUTPUT);
  pinMode(segE, OUTPUT);
  pinMode(segF, OUTPUT);
  pinMode(segG, OUTPUT);
  pinMode(UNIDAD, OUTPUT);
  pinMode(DECENA, OUTPUT);
  pinMode(motor, OUTPUT);
  pinMode(sensorAmbiental, INPUT);
  printDigit(0); // Inicializa el display
  Serial.begin(9600);
}

void loop() {
  interruptor = digitalRead(INTERRUPTOR_DESLIZANTE);  
  temperatura = analogRead(sensor);
  valorLuz = analogRead(sensorAmbiental);
  
  Serial.print(temperatura);

  if (interruptor == 0) {
    interruptorEncendido = false;     // Si el interruptor esta en false muestra nueros primos
    unsigned long tiempoActual = millis();  //usamos millis
    if (tiempoActual - ultimoTiempoDisplay >= intervaloDisplay) {
      ultimoTiempoDisplay = tiempoActual;
      do {
        numeroMultiplo++;
        if (numeroMultiplo > 99) {
          numeroMultiplo = 0;
        } 
      } while (!esMultiploCinco(numeroMultiplo));
      imprimirContador(numeroMultiplo);
    }
  } else {
    interruptorEncendido = true;     // si esta en true muestra el contador
    unsigned long tiempoActual = millis();
    if (tiempoActual - ultimoTiempoDisplay >= intervaloDisplay) {
      ultimoTiempoDisplay = tiempoActual;
      contador++;
      if (contador > 99) {
        contador = 0;
      }
      imprimirContador(contador);
    }
  }
  controlarMotor(temperatura, valorLuz);
}

bool esMultiploCinco(int numero) {
  return (numero % 5 == 0);
}

void printDigit(int digito) {
  digitalWrite(segA, LOW);
  digitalWrite(segB, LOW);
  digitalWrite(segC, LOW);
  digitalWrite(segD, LOW);
  digitalWrite(segE, LOW);
  digitalWrite(segF, LOW);
  digitalWrite(segG, LOW);
  switch (digito) {
    case 0:
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, HIGH);
      digitalWrite(segF, HIGH);
      break;
    case 1:
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      break;
    case 2:
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, HIGH);
      digitalWrite(segG, HIGH);
      break;
    case 3:
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, HIGH);
      digitalWrite(segG, HIGH);
      break;
    case 4:
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, HIGH);
      break;
    case 5:
      digitalWrite(segA, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, HIGH);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, HIGH);
      break;
    case 6:
      digitalWrite(segA, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, HIGH);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, HIGH);
      break;
    case 7:
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      break;
    case 8:
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, HIGH);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, HIGH);
      break;
    case 9:
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, HIGH);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, HIGH);
      break;
  }
}

void prendeDigito(int digito) {
  if (digito == UNIDAD) {
    digitalWrite(UNIDAD, LOW);
    digitalWrite(DECENA, HIGH);
    delay(tiempoDisplayON);
  } else if (digito == DECENA) {
    digitalWrite(UNIDAD, HIGH);
    digitalWrite(DECENA, LOW);
    delay(tiempoDisplayON);
  } else {
    digitalWrite(UNIDAD, HIGH);
    digitalWrite(DECENA, HIGH);
  }
}

void imprimirContador(int contar) {
  int decenas = contar / 10;
  int unidades = contar % 10;

  prendeDigito(DECENA);
  printDigit(decenas);

  prendeDigito(UNIDAD);
  printDigit(unidades);
}

void controlarMotor(float temperatura, int luzAmbiental) {
  if (temperatura < 184 && luzAmbiental < 800) {
    digitalWrite(motor, HIGH);
  } else {
    digitalWrite(motor, LOW);
  }
}
